// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SdkMgrRouteServiceClient is the client API for SdkMgrRouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdkMgrRouteServiceClient interface {
	/// Add or update IP routes.
	RouteAddOrUpdate(ctx context.Context, in *RouteAddRequest, opts ...grpc.CallOption) (*RouteAddResponse, error)
	/// Delete IP routes.
	RouteDelete(ctx context.Context, in *RouteDeleteRequest, opts ...grpc.CallOption) (*RouteDeleteResponse, error)
	/// Synchronization start for IP routes
	SyncStart(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	/// Synchronization end for IP routes
	SyncEnd(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type sdkMgrRouteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSdkMgrRouteServiceClient(cc grpc.ClientConnInterface) SdkMgrRouteServiceClient {
	return &sdkMgrRouteServiceClient{cc}
}

var sdkMgrRouteServiceRouteAddOrUpdateStreamDesc = &grpc.StreamDesc{
	StreamName: "RouteAddOrUpdate",
}

func (c *sdkMgrRouteServiceClient) RouteAddOrUpdate(ctx context.Context, in *RouteAddRequest, opts ...grpc.CallOption) (*RouteAddResponse, error) {
	out := new(RouteAddResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrRouteService/RouteAddOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrRouteServiceRouteDeleteStreamDesc = &grpc.StreamDesc{
	StreamName: "RouteDelete",
}

func (c *sdkMgrRouteServiceClient) RouteDelete(ctx context.Context, in *RouteDeleteRequest, opts ...grpc.CallOption) (*RouteDeleteResponse, error) {
	out := new(RouteDeleteResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrRouteService/RouteDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrRouteServiceSyncStartStreamDesc = &grpc.StreamDesc{
	StreamName: "SyncStart",
}

func (c *sdkMgrRouteServiceClient) SyncStart(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrRouteService/SyncStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrRouteServiceSyncEndStreamDesc = &grpc.StreamDesc{
	StreamName: "SyncEnd",
}

func (c *sdkMgrRouteServiceClient) SyncEnd(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrRouteService/SyncEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdkMgrRouteServiceService is the service API for SdkMgrRouteService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterSdkMgrRouteServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type SdkMgrRouteServiceService struct {
	/// Add or update IP routes.
	RouteAddOrUpdate func(context.Context, *RouteAddRequest) (*RouteAddResponse, error)
	/// Delete IP routes.
	RouteDelete func(context.Context, *RouteDeleteRequest) (*RouteDeleteResponse, error)
	/// Synchronization start for IP routes
	SyncStart func(context.Context, *SyncRequest) (*SyncResponse, error)
	/// Synchronization end for IP routes
	SyncEnd func(context.Context, *SyncRequest) (*SyncResponse, error)
}

func (s *SdkMgrRouteServiceService) routeAddOrUpdate(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.RouteAddOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrRouteService/RouteAddOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RouteAddOrUpdate(ctx, req.(*RouteAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrRouteServiceService) routeDelete(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.RouteDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrRouteService/RouteDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RouteDelete(ctx, req.(*RouteDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrRouteServiceService) syncStart(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SyncStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrRouteService/SyncStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SyncStart(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrRouteServiceService) syncEnd(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SyncEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrRouteService/SyncEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SyncEnd(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterSdkMgrRouteServiceService registers a service implementation with a gRPC server.
func RegisterSdkMgrRouteServiceService(s grpc.ServiceRegistrar, srv *SdkMgrRouteServiceService) {
	srvCopy := *srv
	if srvCopy.RouteAddOrUpdate == nil {
		srvCopy.RouteAddOrUpdate = func(context.Context, *RouteAddRequest) (*RouteAddResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method RouteAddOrUpdate not implemented")
		}
	}
	if srvCopy.RouteDelete == nil {
		srvCopy.RouteDelete = func(context.Context, *RouteDeleteRequest) (*RouteDeleteResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method RouteDelete not implemented")
		}
	}
	if srvCopy.SyncStart == nil {
		srvCopy.SyncStart = func(context.Context, *SyncRequest) (*SyncResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SyncStart not implemented")
		}
	}
	if srvCopy.SyncEnd == nil {
		srvCopy.SyncEnd = func(context.Context, *SyncRequest) (*SyncResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SyncEnd not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "srlinux.sdk.SdkMgrRouteService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "RouteAddOrUpdate",
				Handler:    srvCopy.routeAddOrUpdate,
			},
			{
				MethodName: "RouteDelete",
				Handler:    srvCopy.routeDelete,
			},
			{
				MethodName: "SyncStart",
				Handler:    srvCopy.syncStart,
			},
			{
				MethodName: "SyncEnd",
				Handler:    srvCopy.syncEnd,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "route_service.proto",
	}

	s.RegisterService(&sd, nil)
}
