// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SdkMgrServiceClient is the client API for SdkMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdkMgrServiceClient interface {
	/// Register agent
	AgentRegister(ctx context.Context, in *AgentRegistrationRequest, opts ...grpc.CallOption) (*AgentRegistrationResponse, error)
	/// Unregister agent
	AgentUnRegister(ctx context.Context, in *AgentRegistrationRequest, opts ...grpc.CallOption) (*AgentRegistrationResponse, error)
	/// Register for event notifications
	NotificationRegister(ctx context.Context, in *NotificationRegisterRequest, opts ...grpc.CallOption) (*NotificationRegisterResponse, error)
	/// Returns current or specific notification subscription details
	NotificationQuery(ctx context.Context, in *NotificationQueryRequest, opts ...grpc.CallOption) (*NotificationQueryResponse, error)
	/// Send periodic keepalive message
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error)
	/// Get application name from application identifier
	GetAppId(ctx context.Context, in *AppIdRequest, opts ...grpc.CallOption) (*AppIdResponse, error)
}

type sdkMgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSdkMgrServiceClient(cc grpc.ClientConnInterface) SdkMgrServiceClient {
	return &sdkMgrServiceClient{cc}
}

var sdkMgrServiceAgentRegisterStreamDesc = &grpc.StreamDesc{
	StreamName: "AgentRegister",
}

func (c *sdkMgrServiceClient) AgentRegister(ctx context.Context, in *AgentRegistrationRequest, opts ...grpc.CallOption) (*AgentRegistrationResponse, error) {
	out := new(AgentRegistrationResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrService/AgentRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrServiceAgentUnRegisterStreamDesc = &grpc.StreamDesc{
	StreamName: "AgentUnRegister",
}

func (c *sdkMgrServiceClient) AgentUnRegister(ctx context.Context, in *AgentRegistrationRequest, opts ...grpc.CallOption) (*AgentRegistrationResponse, error) {
	out := new(AgentRegistrationResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrService/AgentUnRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrServiceNotificationRegisterStreamDesc = &grpc.StreamDesc{
	StreamName: "NotificationRegister",
}

func (c *sdkMgrServiceClient) NotificationRegister(ctx context.Context, in *NotificationRegisterRequest, opts ...grpc.CallOption) (*NotificationRegisterResponse, error) {
	out := new(NotificationRegisterResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrService/NotificationRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrServiceNotificationQueryStreamDesc = &grpc.StreamDesc{
	StreamName: "NotificationQuery",
}

func (c *sdkMgrServiceClient) NotificationQuery(ctx context.Context, in *NotificationQueryRequest, opts ...grpc.CallOption) (*NotificationQueryResponse, error) {
	out := new(NotificationQueryResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrService/NotificationQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrServiceKeepAliveStreamDesc = &grpc.StreamDesc{
	StreamName: "KeepAlive",
}

func (c *sdkMgrServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	out := new(KeepAliveResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrService/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrServiceGetAppIdStreamDesc = &grpc.StreamDesc{
	StreamName: "GetAppId",
}

func (c *sdkMgrServiceClient) GetAppId(ctx context.Context, in *AppIdRequest, opts ...grpc.CallOption) (*AppIdResponse, error) {
	out := new(AppIdResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrService/GetAppId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdkMgrServiceService is the service API for SdkMgrService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterSdkMgrServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type SdkMgrServiceService struct {
	/// Register agent
	AgentRegister func(context.Context, *AgentRegistrationRequest) (*AgentRegistrationResponse, error)
	/// Unregister agent
	AgentUnRegister func(context.Context, *AgentRegistrationRequest) (*AgentRegistrationResponse, error)
	/// Register for event notifications
	NotificationRegister func(context.Context, *NotificationRegisterRequest) (*NotificationRegisterResponse, error)
	/// Returns current or specific notification subscription details
	NotificationQuery func(context.Context, *NotificationQueryRequest) (*NotificationQueryResponse, error)
	/// Send periodic keepalive message
	KeepAlive func(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error)
	/// Get application name from application identifier
	GetAppId func(context.Context, *AppIdRequest) (*AppIdResponse, error)
}

func (s *SdkMgrServiceService) agentRegister(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.AgentRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrService/AgentRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AgentRegister(ctx, req.(*AgentRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrServiceService) agentUnRegister(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.AgentUnRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrService/AgentUnRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AgentUnRegister(ctx, req.(*AgentRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrServiceService) notificationRegister(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.NotificationRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrService/NotificationRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.NotificationRegister(ctx, req.(*NotificationRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrServiceService) notificationQuery(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.NotificationQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrService/NotificationQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.NotificationQuery(ctx, req.(*NotificationQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrServiceService) keepAlive(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrService/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrServiceService) getAppId(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetAppId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrService/GetAppId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetAppId(ctx, req.(*AppIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterSdkMgrServiceService registers a service implementation with a gRPC server.
func RegisterSdkMgrServiceService(s grpc.ServiceRegistrar, srv *SdkMgrServiceService) {
	srvCopy := *srv
	if srvCopy.AgentRegister == nil {
		srvCopy.AgentRegister = func(context.Context, *AgentRegistrationRequest) (*AgentRegistrationResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method AgentRegister not implemented")
		}
	}
	if srvCopy.AgentUnRegister == nil {
		srvCopy.AgentUnRegister = func(context.Context, *AgentRegistrationRequest) (*AgentRegistrationResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method AgentUnRegister not implemented")
		}
	}
	if srvCopy.NotificationRegister == nil {
		srvCopy.NotificationRegister = func(context.Context, *NotificationRegisterRequest) (*NotificationRegisterResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method NotificationRegister not implemented")
		}
	}
	if srvCopy.NotificationQuery == nil {
		srvCopy.NotificationQuery = func(context.Context, *NotificationQueryRequest) (*NotificationQueryResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method NotificationQuery not implemented")
		}
	}
	if srvCopy.KeepAlive == nil {
		srvCopy.KeepAlive = func(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
		}
	}
	if srvCopy.GetAppId == nil {
		srvCopy.GetAppId = func(context.Context, *AppIdRequest) (*AppIdResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetAppId not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "srlinux.sdk.SdkMgrService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "AgentRegister",
				Handler:    srvCopy.agentRegister,
			},
			{
				MethodName: "AgentUnRegister",
				Handler:    srvCopy.agentUnRegister,
			},
			{
				MethodName: "NotificationRegister",
				Handler:    srvCopy.notificationRegister,
			},
			{
				MethodName: "NotificationQuery",
				Handler:    srvCopy.notificationQuery,
			},
			{
				MethodName: "KeepAlive",
				Handler:    srvCopy.keepAlive,
			},
			{
				MethodName: "GetAppId",
				Handler:    srvCopy.getAppId,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "sdk_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// SdkNotificationServiceClient is the client API for SdkNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdkNotificationServiceClient interface {
	/// Send stream of event notifications based on the agent subscriptions
	NotificationStream(ctx context.Context, in *NotificationStreamRequest, opts ...grpc.CallOption) (SdkNotificationService_NotificationStreamClient, error)
}

type sdkNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSdkNotificationServiceClient(cc grpc.ClientConnInterface) SdkNotificationServiceClient {
	return &sdkNotificationServiceClient{cc}
}

var sdkNotificationServiceNotificationStreamStreamDesc = &grpc.StreamDesc{
	StreamName:    "NotificationStream",
	ServerStreams: true,
}

func (c *sdkNotificationServiceClient) NotificationStream(ctx context.Context, in *NotificationStreamRequest, opts ...grpc.CallOption) (SdkNotificationService_NotificationStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, sdkNotificationServiceNotificationStreamStreamDesc, "/srlinux.sdk.SdkNotificationService/NotificationStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sdkNotificationServiceNotificationStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SdkNotificationService_NotificationStreamClient interface {
	Recv() (*NotificationStreamResponse, error)
	grpc.ClientStream
}

type sdkNotificationServiceNotificationStreamClient struct {
	grpc.ClientStream
}

func (x *sdkNotificationServiceNotificationStreamClient) Recv() (*NotificationStreamResponse, error) {
	m := new(NotificationStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SdkNotificationServiceService is the service API for SdkNotificationService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterSdkNotificationServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type SdkNotificationServiceService struct {
	/// Send stream of event notifications based on the agent subscriptions
	NotificationStream func(*NotificationStreamRequest, SdkNotificationService_NotificationStreamServer) error
}

func (s *SdkNotificationServiceService) notificationStream(_ interface{}, stream grpc.ServerStream) error {
	m := new(NotificationStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.NotificationStream(m, &sdkNotificationServiceNotificationStreamServer{stream})
}

type SdkNotificationService_NotificationStreamServer interface {
	Send(*NotificationStreamResponse) error
	grpc.ServerStream
}

type sdkNotificationServiceNotificationStreamServer struct {
	grpc.ServerStream
}

func (x *sdkNotificationServiceNotificationStreamServer) Send(m *NotificationStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterSdkNotificationServiceService registers a service implementation with a gRPC server.
func RegisterSdkNotificationServiceService(s grpc.ServiceRegistrar, srv *SdkNotificationServiceService) {
	srvCopy := *srv
	if srvCopy.NotificationStream == nil {
		srvCopy.NotificationStream = func(*NotificationStreamRequest, SdkNotificationService_NotificationStreamServer) error {
			return status.Errorf(codes.Unimplemented, "method NotificationStream not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "srlinux.sdk.SdkNotificationService",
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "NotificationStream",
				Handler:       srvCopy.notificationStream,
				ServerStreams: true,
			},
		},
		Metadata: "sdk_service.proto",
	}

	s.RegisterService(&sd, nil)
}
