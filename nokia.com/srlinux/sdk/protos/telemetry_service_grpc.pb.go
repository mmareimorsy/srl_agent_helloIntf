// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SdkMgrTelemetryServiceClient is the client API for SdkMgrTelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdkMgrTelemetryServiceClient interface {
	/// Add or update telemetry data
	TelemetryAddOrUpdate(ctx context.Context, in *TelemetryUpdateRequest, opts ...grpc.CallOption) (*TelemetryUpdateResponse, error)
	/// Delete telemetry data
	TelemetryDelete(ctx context.Context, in *TelemetryDeleteRequest, opts ...grpc.CallOption) (*TelemetryDeleteResponse, error)
}

type sdkMgrTelemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSdkMgrTelemetryServiceClient(cc grpc.ClientConnInterface) SdkMgrTelemetryServiceClient {
	return &sdkMgrTelemetryServiceClient{cc}
}

var sdkMgrTelemetryServiceTelemetryAddOrUpdateStreamDesc = &grpc.StreamDesc{
	StreamName: "TelemetryAddOrUpdate",
}

func (c *sdkMgrTelemetryServiceClient) TelemetryAddOrUpdate(ctx context.Context, in *TelemetryUpdateRequest, opts ...grpc.CallOption) (*TelemetryUpdateResponse, error) {
	out := new(TelemetryUpdateResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrTelemetryService/TelemetryAddOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrTelemetryServiceTelemetryDeleteStreamDesc = &grpc.StreamDesc{
	StreamName: "TelemetryDelete",
}

func (c *sdkMgrTelemetryServiceClient) TelemetryDelete(ctx context.Context, in *TelemetryDeleteRequest, opts ...grpc.CallOption) (*TelemetryDeleteResponse, error) {
	out := new(TelemetryDeleteResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrTelemetryService/TelemetryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdkMgrTelemetryServiceService is the service API for SdkMgrTelemetryService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterSdkMgrTelemetryServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type SdkMgrTelemetryServiceService struct {
	/// Add or update telemetry data
	TelemetryAddOrUpdate func(context.Context, *TelemetryUpdateRequest) (*TelemetryUpdateResponse, error)
	/// Delete telemetry data
	TelemetryDelete func(context.Context, *TelemetryDeleteRequest) (*TelemetryDeleteResponse, error)
}

func (s *SdkMgrTelemetryServiceService) telemetryAddOrUpdate(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelemetryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.TelemetryAddOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrTelemetryService/TelemetryAddOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.TelemetryAddOrUpdate(ctx, req.(*TelemetryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrTelemetryServiceService) telemetryDelete(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelemetryDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.TelemetryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrTelemetryService/TelemetryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.TelemetryDelete(ctx, req.(*TelemetryDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterSdkMgrTelemetryServiceService registers a service implementation with a gRPC server.
func RegisterSdkMgrTelemetryServiceService(s grpc.ServiceRegistrar, srv *SdkMgrTelemetryServiceService) {
	srvCopy := *srv
	if srvCopy.TelemetryAddOrUpdate == nil {
		srvCopy.TelemetryAddOrUpdate = func(context.Context, *TelemetryUpdateRequest) (*TelemetryUpdateResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method TelemetryAddOrUpdate not implemented")
		}
	}
	if srvCopy.TelemetryDelete == nil {
		srvCopy.TelemetryDelete = func(context.Context, *TelemetryDeleteRequest) (*TelemetryDeleteResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method TelemetryDelete not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "srlinux.sdk.SdkMgrTelemetryService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "TelemetryAddOrUpdate",
				Handler:    srvCopy.telemetryAddOrUpdate,
			},
			{
				MethodName: "TelemetryDelete",
				Handler:    srvCopy.telemetryDelete,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "telemetry_service.proto",
	}

	s.RegisterService(&sd, nil)
}
