// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SdkMgrNextHopGroupServiceClient is the client API for SdkMgrNextHopGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdkMgrNextHopGroupServiceClient interface {
	/// Add or update one or more next-hop groups.
	NextHopGroupAddOrUpdate(ctx context.Context, in *NextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroupResponse, error)
	/// Delete next-hop group.
	NextHopGroupDelete(ctx context.Context, in *NextHopGroupDeleteRequest, opts ...grpc.CallOption) (*NextHopGroupDeleteResponse, error)
	/// Synchronization start to open synchronization operation.
	SyncStart(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	/// Synchronization end to close synchronization operation.
	SyncEnd(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type sdkMgrNextHopGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSdkMgrNextHopGroupServiceClient(cc grpc.ClientConnInterface) SdkMgrNextHopGroupServiceClient {
	return &sdkMgrNextHopGroupServiceClient{cc}
}

var sdkMgrNextHopGroupServiceNextHopGroupAddOrUpdateStreamDesc = &grpc.StreamDesc{
	StreamName: "NextHopGroupAddOrUpdate",
}

func (c *sdkMgrNextHopGroupServiceClient) NextHopGroupAddOrUpdate(ctx context.Context, in *NextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroupResponse, error) {
	out := new(NextHopGroupResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrNextHopGroupService/NextHopGroupAddOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrNextHopGroupServiceNextHopGroupDeleteStreamDesc = &grpc.StreamDesc{
	StreamName: "NextHopGroupDelete",
}

func (c *sdkMgrNextHopGroupServiceClient) NextHopGroupDelete(ctx context.Context, in *NextHopGroupDeleteRequest, opts ...grpc.CallOption) (*NextHopGroupDeleteResponse, error) {
	out := new(NextHopGroupDeleteResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrNextHopGroupService/NextHopGroupDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrNextHopGroupServiceSyncStartStreamDesc = &grpc.StreamDesc{
	StreamName: "SyncStart",
}

func (c *sdkMgrNextHopGroupServiceClient) SyncStart(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrNextHopGroupService/SyncStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrNextHopGroupServiceSyncEndStreamDesc = &grpc.StreamDesc{
	StreamName: "SyncEnd",
}

func (c *sdkMgrNextHopGroupServiceClient) SyncEnd(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrNextHopGroupService/SyncEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdkMgrNextHopGroupServiceService is the service API for SdkMgrNextHopGroupService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterSdkMgrNextHopGroupServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type SdkMgrNextHopGroupServiceService struct {
	/// Add or update one or more next-hop groups.
	NextHopGroupAddOrUpdate func(context.Context, *NextHopGroupRequest) (*NextHopGroupResponse, error)
	/// Delete next-hop group.
	NextHopGroupDelete func(context.Context, *NextHopGroupDeleteRequest) (*NextHopGroupDeleteResponse, error)
	/// Synchronization start to open synchronization operation.
	SyncStart func(context.Context, *SyncRequest) (*SyncResponse, error)
	/// Synchronization end to close synchronization operation.
	SyncEnd func(context.Context, *SyncRequest) (*SyncResponse, error)
}

func (s *SdkMgrNextHopGroupServiceService) nextHopGroupAddOrUpdate(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.NextHopGroupAddOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrNextHopGroupService/NextHopGroupAddOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.NextHopGroupAddOrUpdate(ctx, req.(*NextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrNextHopGroupServiceService) nextHopGroupDelete(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextHopGroupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.NextHopGroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrNextHopGroupService/NextHopGroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.NextHopGroupDelete(ctx, req.(*NextHopGroupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrNextHopGroupServiceService) syncStart(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SyncStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrNextHopGroupService/SyncStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SyncStart(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrNextHopGroupServiceService) syncEnd(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SyncEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrNextHopGroupService/SyncEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SyncEnd(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterSdkMgrNextHopGroupServiceService registers a service implementation with a gRPC server.
func RegisterSdkMgrNextHopGroupServiceService(s grpc.ServiceRegistrar, srv *SdkMgrNextHopGroupServiceService) {
	srvCopy := *srv
	if srvCopy.NextHopGroupAddOrUpdate == nil {
		srvCopy.NextHopGroupAddOrUpdate = func(context.Context, *NextHopGroupRequest) (*NextHopGroupResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method NextHopGroupAddOrUpdate not implemented")
		}
	}
	if srvCopy.NextHopGroupDelete == nil {
		srvCopy.NextHopGroupDelete = func(context.Context, *NextHopGroupDeleteRequest) (*NextHopGroupDeleteResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method NextHopGroupDelete not implemented")
		}
	}
	if srvCopy.SyncStart == nil {
		srvCopy.SyncStart = func(context.Context, *SyncRequest) (*SyncResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SyncStart not implemented")
		}
	}
	if srvCopy.SyncEnd == nil {
		srvCopy.SyncEnd = func(context.Context, *SyncRequest) (*SyncResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SyncEnd not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "srlinux.sdk.SdkMgrNextHopGroupService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "NextHopGroupAddOrUpdate",
				Handler:    srvCopy.nextHopGroupAddOrUpdate,
			},
			{
				MethodName: "NextHopGroupDelete",
				Handler:    srvCopy.nextHopGroupDelete,
			},
			{
				MethodName: "SyncStart",
				Handler:    srvCopy.syncStart,
			},
			{
				MethodName: "SyncEnd",
				Handler:    srvCopy.syncEnd,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "nexthop_group_service.proto",
	}

	s.RegisterService(&sd, nil)
}
