// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SdkMgrMplsRouteServiceClient is the client API for SdkMgrMplsRouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdkMgrMplsRouteServiceClient interface {
	/// MPLS route add or update; can add or update more than one MPLS route in one request
	MplsRouteAddOrUpdate(ctx context.Context, in *MplsRouteAddRequest, opts ...grpc.CallOption) (*MplsRouteAddResponse, error)
	/// MPLS route delete; can delete more than one MPLS route in one request
	MplsRouteDelete(ctx context.Context, in *MplsRouteDeleteRequest, opts ...grpc.CallOption) (*MplsRouteDeleteResponse, error)
	/// Synchronization start to begin synchronization operation
	SyncStart(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	/// Synchronization end to close synchronization operation
	SyncEnd(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type sdkMgrMplsRouteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSdkMgrMplsRouteServiceClient(cc grpc.ClientConnInterface) SdkMgrMplsRouteServiceClient {
	return &sdkMgrMplsRouteServiceClient{cc}
}

var sdkMgrMplsRouteServiceMplsRouteAddOrUpdateStreamDesc = &grpc.StreamDesc{
	StreamName: "MplsRouteAddOrUpdate",
}

func (c *sdkMgrMplsRouteServiceClient) MplsRouteAddOrUpdate(ctx context.Context, in *MplsRouteAddRequest, opts ...grpc.CallOption) (*MplsRouteAddResponse, error) {
	out := new(MplsRouteAddResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrMplsRouteService/MplsRouteAddOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrMplsRouteServiceMplsRouteDeleteStreamDesc = &grpc.StreamDesc{
	StreamName: "MplsRouteDelete",
}

func (c *sdkMgrMplsRouteServiceClient) MplsRouteDelete(ctx context.Context, in *MplsRouteDeleteRequest, opts ...grpc.CallOption) (*MplsRouteDeleteResponse, error) {
	out := new(MplsRouteDeleteResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrMplsRouteService/MplsRouteDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrMplsRouteServiceSyncStartStreamDesc = &grpc.StreamDesc{
	StreamName: "SyncStart",
}

func (c *sdkMgrMplsRouteServiceClient) SyncStart(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrMplsRouteService/SyncStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sdkMgrMplsRouteServiceSyncEndStreamDesc = &grpc.StreamDesc{
	StreamName: "SyncEnd",
}

func (c *sdkMgrMplsRouteServiceClient) SyncEnd(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrMplsRouteService/SyncEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdkMgrMplsRouteServiceService is the service API for SdkMgrMplsRouteService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterSdkMgrMplsRouteServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type SdkMgrMplsRouteServiceService struct {
	/// MPLS route add or update; can add or update more than one MPLS route in one request
	MplsRouteAddOrUpdate func(context.Context, *MplsRouteAddRequest) (*MplsRouteAddResponse, error)
	/// MPLS route delete; can delete more than one MPLS route in one request
	MplsRouteDelete func(context.Context, *MplsRouteDeleteRequest) (*MplsRouteDeleteResponse, error)
	/// Synchronization start to begin synchronization operation
	SyncStart func(context.Context, *SyncRequest) (*SyncResponse, error)
	/// Synchronization end to close synchronization operation
	SyncEnd func(context.Context, *SyncRequest) (*SyncResponse, error)
}

func (s *SdkMgrMplsRouteServiceService) mplsRouteAddOrUpdate(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MplsRouteAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.MplsRouteAddOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrMplsRouteService/MplsRouteAddOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.MplsRouteAddOrUpdate(ctx, req.(*MplsRouteAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrMplsRouteServiceService) mplsRouteDelete(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MplsRouteDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.MplsRouteDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrMplsRouteService/MplsRouteDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.MplsRouteDelete(ctx, req.(*MplsRouteDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrMplsRouteServiceService) syncStart(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SyncStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrMplsRouteService/SyncStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SyncStart(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SdkMgrMplsRouteServiceService) syncEnd(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SyncEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/srlinux.sdk.SdkMgrMplsRouteService/SyncEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SyncEnd(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterSdkMgrMplsRouteServiceService registers a service implementation with a gRPC server.
func RegisterSdkMgrMplsRouteServiceService(s grpc.ServiceRegistrar, srv *SdkMgrMplsRouteServiceService) {
	srvCopy := *srv
	if srvCopy.MplsRouteAddOrUpdate == nil {
		srvCopy.MplsRouteAddOrUpdate = func(context.Context, *MplsRouteAddRequest) (*MplsRouteAddResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method MplsRouteAddOrUpdate not implemented")
		}
	}
	if srvCopy.MplsRouteDelete == nil {
		srvCopy.MplsRouteDelete = func(context.Context, *MplsRouteDeleteRequest) (*MplsRouteDeleteResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method MplsRouteDelete not implemented")
		}
	}
	if srvCopy.SyncStart == nil {
		srvCopy.SyncStart = func(context.Context, *SyncRequest) (*SyncResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SyncStart not implemented")
		}
	}
	if srvCopy.SyncEnd == nil {
		srvCopy.SyncEnd = func(context.Context, *SyncRequest) (*SyncResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SyncEnd not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "srlinux.sdk.SdkMgrMplsRouteService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "MplsRouteAddOrUpdate",
				Handler:    srvCopy.mplsRouteAddOrUpdate,
			},
			{
				MethodName: "MplsRouteDelete",
				Handler:    srvCopy.mplsRouteDelete,
			},
			{
				MethodName: "SyncStart",
				Handler:    srvCopy.syncStart,
			},
			{
				MethodName: "SyncEnd",
				Handler:    srvCopy.syncEnd,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "mpls_service.proto",
	}

	s.RegisterService(&sd, nil)
}
